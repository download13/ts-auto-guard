import test from 'tape'
import { Project } from 'ts-morph'
import { minify, MinifyOptions } from 'uglify-js'
import { IProcessOptions, processProject } from '../src'

function createProject(): Project {
  return new Project({
    skipAddingFilesFromTsConfig: true,
    compilerOptions: { strict: true },
    useInMemoryFileSystem: true,
  })
}

interface ITestOptions {
  skip?: boolean
  only?: boolean
  minifyOptions?: MinifyOptions
  options?: IProcessOptions
  throws?: RegExp | typeof Error
}

function testProcessProject(
  typeDescription: string,
  input: { readonly [filename: string]: string },
  output: { readonly [filename: string]: string | null },
  { skip, only, options, minifyOptions, throws }: ITestOptions = {}
) {
  const fn = skip ? test.skip : only ? test.only : test
  fn(typeDescription, t => {
    const project = createProject()
    Object.entries(input).forEach(([filePath, content]) => {
      project.createSourceFile(filePath, content)
    })
    project.saveSync()

    const expectedFilenames = new Set(Object.keys(output))

    if (throws) {
      t.throws(() => {
        processProject(project, options)
      }, throws)
      t.end()
      return
    }

    t.doesNotThrow(() => {
      processProject(project, options)
    })

    for (const sourceFile of project.getSourceFiles()) {
      const filePath = sourceFile.getFilePath().slice(1)
      const expectedRaw = output[filePath]
      if (expectedRaw === undefined) {
        t.fail(`unexpected file ${filePath}`)
      } else if (expectedRaw === null) {
        // This file is expected, but must not have been changed
        expectedFilenames.delete(filePath)
        const sourceText = sourceFile.getFullText()
        t.equal(sourceText, input[filePath], `${filePath} should not change`)
      } else {
        // This is a new file
        expectedFilenames.delete(filePath)
        const expectedFile = project.createSourceFile(
          `${filePath}.expected`,
          expectedRaw
        )
        let sourceText: string
        if (minifyOptions !== undefined) {
          const emitOutput = sourceFile.getEmitOutput()
          const result = minify(
            emitOutput.getOutputFiles()[0].getText(),
            minifyOptions
          )
          t.error(result.error, 'UglifyJS should succeed')
          sourceText = result.code
        } else {
          expectedFile.formatText()
          sourceText = sourceFile.getText()
        }

        const expectedText = expectedFile.getText()
        t.equal(sourceText, expectedText, `${filePath} should match`)
      }
    }
    for (const filePath of expectedFilenames) {
      t.fail(`${filePath} not found`)
    }
    t.end()
  })
}

testProcessProject(
  'removes existing .guard.ts files',
  {
    'test.guard.ts': `/* WARNING: Do not manually change this file. */ alert("hello")`,
  },
  {}
)

testProcessProject(
  'does not touch .guard.ts files that are not autogenerated',
  { 'test.guard.ts': `alert("hello")` },
  { 'test.guard.ts': null }
)

testProcessProject(
  'removes correct .guard.ts files when guardFileName is set',
  {
    'test.foo.ts': `/* WARNING: Do not manually change this file. */alert("hello")`,
    'test.guard.ts': `/* WARNING: Do not manually change this file. */alert("hello")`,
  },
  { 'test.guard.ts': null },
  { options: { guardFileName: 'foo' } }
)

const invalidGuardFileNameCharacters = ['*', '/']
for (const invalidCharacter of invalidGuardFileNameCharacters) {
  testProcessProject(
    `rejects invalid guardFileNames: ${invalidCharacter}`,
    {},
    {},
    {
      options: { guardFileName: `f${invalidCharacter}o` },
      throws: /guardFileName/,
    }
  )
}

testProcessProject(
  'generates type guards for empty object if exportAll is true',
  {
    'test.ts': `
    export interface Empty {}`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Empty } from "./test";

    export function isEmpty(obj: any): obj is Empty {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function")
        )
    }`,
  },
  { options: { exportAll: true, debug: false } }
)

testProcessProject(
  'generates type guards for JSDoc @see with @link tag',
  {
    'test.ts': `
    /** @see {@link isBool} ts-auto-guard:type-guard */
    export type Bool = boolean`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Bool } from "./test";

    export function isBool(obj: any): obj is Bool {
        return (
            typeof obj === "boolean"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for boolean',
  {
    'test.ts': `
    /** @see {isBool} ts-auto-guard:type-guard */
    export type Bool = boolean`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Bool } from "./test";

    export function isBool(obj: any): obj is Bool {
        return (
            typeof obj === "boolean"
        )
    }`,
  }
)

testProcessProject(
  'allows the name of the guard file file to be specified',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo: number,
      bar: string
    }`,
  },
  {
    'test.ts': null,
    'test.debug.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["foo"] === "number" &&
            typeof obj["bar"] === "string"
        )
    }`,
  },
  {
    options: {
      guardFileName: 'debug',
    },
  }
)

testProcessProject(
  'show debug info',
  {
    [`foo/bar/test.ts`]: `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo: number,
      bar: Bar,
      bars: Array<Bar>
    }

    /** @see {isBar} ts-auto-guard:type-guard */
    export interface Bar {
      bar: number,
    }

    `,
  },
  {
    [`foo/bar/test.ts`]: null,
    [`foo/bar/test.guard.ts`]: `
    import { Foo, Bar } from "./test";

    function evaluate(
      isCorrect: boolean,
      varName: string,
      expected: string,
      actual: any
    ): boolean {
      if (!isCorrect) {
        console.error(
          \`\${varName} type mismatch, expected: \${expected}, found:\`,
                      actual
          )
      }
      return isCorrect
    }

    export function isFoo(obj: any, argumentName: string = "foo"): obj is Foo {
      return (
        (obj !== null &&
          typeof obj === "object" ||
          typeof obj === "function") &&
          evaluate(typeof obj["foo"] === "number", \`\${argumentName}["foo"]\`, "number", obj["foo"]) &&
          evaluate(isBar(obj["bar"]) as boolean, \`\${argumentName}["bar"]\`, "import(\\"/foo/bar/test\\").Bar", obj["bar"]) &&
          evaluate(Array.isArray(obj["bars"]) &&
            obj["bars"].every((e: any) =>
              isBar(e) as boolean
            ), \`\${argumentName}["bars"]\`, "import(\\"/foo/bar/test\\").Bar[]", obj["bars"])
        )
    }

    export function isBar(obj: any, argumentName: string = "bar"): obj is Bar {
      return (
        (obj !== null &&
          typeof obj === "object" ||
          typeof obj === "function") &&
          evaluate(typeof obj["bar"] === "number", \`\${argumentName}["bar"]\`, "number", obj["bar"])
        )
    }
    `,
  },
  {
    options: {
      debug: true,
    },
  }
)

testProcessProject(
  'uses correct import file name if guard file is renamed',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo: number,
      bar: string
    }`,
  },
  {
    'test.ts': null,
    'test.debug.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["foo"] === "number" &&
            typeof obj["bar"] === "string"
        )
    }`,
  },
  {
    options: {
      guardFileName: 'debug',
      importGuards: 'CustomGuardAlias',
    },
    skip: true,
  }
)

testProcessProject(
  'generates type guards for simple interface',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo: number,
      bar: string
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["foo"] === "number" &&
            typeof obj["bar"] === "string"
        )
    }`,
  }
)

// characters that are currently not supported include double quotes, backslashes and newlines
const nonAlphanumericCharacterPropertyNames = [
  '\0',
  ' ',
  '-',
  '+',
  '*',
  '/',
  '.',
  'foo bar',
  'foo-bar',
  'foo+bar',
  'foo*bar',
  'foo/bar',
  'foo.bar',
  "'foobar'",
  '#hashtag',
  '1337_leadingNumbers',
]

for (const propertyName of nonAlphanumericCharacterPropertyNames) {
  testProcessProject(
    `generates type guards for interface property with non-alphanumeric name '${propertyName}'`,
    {
      'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      "${propertyName}": number
    }`,
    },
    {
      'test.ts': null,
      'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["${propertyName}"] === "number"
        )
    }`,
    }
  )

  testProcessProject(
    `generates type guards for type property with non-alphanumeric name '${propertyName}'`,
    {
      'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      "${propertyName}": number
    }`,
    },
    {
      'test.ts': null,
      'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["${propertyName}"] === "number"
        )
    }`,
    }
  )
}

testProcessProject(
  'generates type guards for interface properties with numerical names',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      "1": number,
      "2": string
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["1"] === "number" &&
            typeof obj["2"] === "string"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for type properties with numerical names',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      "1": number,
      "2": string
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj["1"] === "number" &&
            typeof obj["2"] === "string"
        )
    }`,
  }
)
testProcessProject(
  'generates type guards for interface property with empty string as name',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      "": number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj[""] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for type property with empty string as name',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      "": number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
            typeof obj === "object" ||
            typeof obj === "function") &&
            typeof obj[""] === "number"
        )
    }`,
  }
)

testProcessProject(
  'correctly handles default export',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    interface Foo {
      foo: number,
      bar: string
    }

    export default Foo`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import Foo from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["foo"] === "number" &&
            typeof obj["bar"] === "string"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for interface with optional field',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo?: number,
      bar: number | undefined,
      baz?: number | undefined
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            ( typeof obj["foo"] === "undefined" ||
              typeof obj["foo"] === "number" ) &&
            ( typeof obj["bar"] === "undefined" ||
              typeof obj["bar"] === "number" ) &&
            ( typeof obj["baz"] === "undefined" ||
              typeof obj["baz"] === "number" )
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for nested interface',
  {
    'test.ts': `
    interface Bar {
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo: Bar,
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            (obj["foo"] !== null &&
              typeof obj["foo"] === "object" ||
              typeof obj["foo"] === "function") &&
            typeof obj["foo"]["bar"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for nested interface with type guard',
  {
    'test.ts': `
    /** @see {isBar} ts-auto-guard:type-guard */
    export interface Bar {
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo {
      foo: Bar,
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Bar, Foo } from "./test";

    export function isBar(obj: any): obj is Bar {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["bar"] === "number"
        )
    }

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            isBar(obj["foo"]) as boolean
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for interface extending other interface',
  {
    'test.ts': `
    interface Bar {
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo extends Bar {
      foo: number,
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["bar"] === "number" &&
            typeof obj["foo"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for interface extending other interface with type guard',
  {
    'test.ts': `
    /** @see {isBar} ts-auto-guard:type-guard */
    export interface Bar {
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo extends Bar {
      foo: number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Bar, Foo } from "./test";

    export function isBar(obj: any): obj is Bar {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["bar"] === "number"
        )
    }

    export function isFoo(obj: any): obj is Foo {
        return (
            isBar(obj) as boolean &&
            typeof obj["foo"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for interface extending object type',
  {
    'test.ts': `
    export type Bar = {
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo extends Bar {
      foo: number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["bar"] === "number" &&
            typeof obj["foo"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for interface extending object type with type guard',
  {
    'test.ts': `
    /** @see {isBar} ts-auto-guard:type-guard */
    export type Bar = {
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export interface Foo extends Bar {
      foo: number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Bar, Foo } from "./test";

    export function isBar(obj: any): obj is Bar {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["bar"] === "number"
        )
    }

    export function isFoo(obj: any): obj is Foo {
        return (
            isBar(obj) as boolean &&
            typeof obj["foo"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for an object literal type',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      foo: number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["foo"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards for a Pick<> type',
  {
    'test.ts': `
    interface Bar {
      foo: number,
      bar: number
    }

    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = Pick<Bar, "foo">`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["foo"] === "number"
        )
    }`,
  }
)

testProcessProject(
  'generates type guards with a short circuit',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      foo: number
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Foo } from "./test";

    export function isFoo(obj: any): obj is Foo {
        if (DEBUG) return true
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
            typeof obj["foo"] === "number"
        )
    }`,
  },
  {
    options: { shortCircuitCondition: 'DEBUG', debug: false },
  }
)

testProcessProject(
  'generated type guards with a short circuit are correctly stripped by UglifyJS',
  {
    'test.ts': `
    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      foo: number,
      bar: Foo | string | () => void,
      baz: "foo" | "bar"
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `"use strict";function isFoo(o){return!0}exports.__esModule=!0,exports.isFoo=void 0,exports.isFoo=isFoo;`,
  },
  {
    minifyOptions: {
      compress: { global_defs: { DEBUG: true } },
    },
    options: { shortCircuitCondition: 'DEBUG', debug: false },
  }
)

testProcessProject(
  'generates type guards for mapped types',
  {
    'test.ts': `
    /** @see {isPropertyValueType} ts-auto-guard:type-guard */
    export type PropertyValueType = {value: string};

    /** @see {isPropertyName} ts-auto-guard:type-guard */
    export type PropertyName = 'name' | 'value';

    /** @see {isFoo} ts-auto-guard:type-guard */
    export type Foo = {
      [key in PropertyName]: PropertyValueType
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
     import { PropertyValueType, PropertyName, Foo } from "./test";

     export function isPropertyValueType(obj: any): obj is PropertyValueType {
        return (
            (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
          typeof obj["value"] === "string"
          )
      }

     export function isPropertyName(obj: any): obj is PropertyName {
       return (
         (obj === "name" ||
           obj === "value")
       )
     }

     export function isFoo(obj: any): obj is Foo {
       return (
         (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function") &&
         isPropertyValueType(obj["name"]) as boolean &&
         isPropertyValueType(obj["value"]) as boolean
       )
     }
    `,
  }
)

testProcessProject(
  'generates type guards for recursive types',
  {
    'test.ts': `
   /** @see {isBranch1} ts-auto-guard:type-guard */
   export type Branch1 = Branch1[] | string;

   /** @see {isBranch2} ts-auto-guard:type-guard */
   export type Branch2 = { branches: Branch2[] } | string;

   /** @see {isBranch3} ts-auto-guard:type-guard */
   export type Branch3 = { branches: Branch3[] } | {branches: Branch3 }[] | string;
    `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Branch1, Branch2, Branch3 } from "./test";

    export function isBranch1(obj: any): obj is Branch1 {
        return (
            (typeof obj === "string" ||
                Array.isArray(obj) &&
                obj.every((e: any) =>
                    isBranch1(e) as boolean
                ))
        )
    }

    export function isBranch2(obj: any): obj is Branch2 {
        return (
            (typeof obj === "string" ||
            (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
                Array.isArray(obj["branches"]) &&
                obj["branches"].every((e: any) =>
                    isBranch2(e) as boolean
                ))
        )
    }

    export function isBranch3(obj: any): obj is Branch3 {
        return (
            (typeof obj === "string" ||
                (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
                Array.isArray(obj["branches"]) &&
                obj["branches"].every((e: any) =>
                    isBranch3(e) as boolean
                ) ||
                Array.isArray(obj) &&
                obj.every((e: any) =>
                    (e !== null &&
                      typeof e === "object" ||
                      typeof e === "function")  &&
                    isBranch3(e["branches"]) as boolean
                ))
        )
    }`,
  }
)

testProcessProject(
  'generated type guards for discriminated unions',
  {
    'test.ts': `
    export type X = { type: 'a', value: number } | { type: 'b', value: string }
    `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { X } from "./test";

    export function isX(obj: any): obj is X {
        return (
            ((obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
                obj["type"] === "a" &&
                typeof obj["value"] === "number" ||
                (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
                obj["type"] === "b" &&
                typeof obj["value"] === "string")
            )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'generated type guards for enums',
  {
    'test.ts': `
    export enum Types{
        TheGood,
        TheBad,
        TheTypeSafe
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { Types } from "./test";

    export function isTypes(obj: any): obj is Types {
        return (
            (obj === Types.TheGood ||
                obj === Types.TheBad ||
                obj === Types.TheTypeSafe)
        )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'generated type guards for numeric enums in optional records',
  {
    'test.ts': `
    export enum Types{
        TheGood = 1,
        TheBad,
        TheTypeSafe
    }
    export interface TestItem  {
      room: Partial<Record<Types, string>>>;
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { Types, TestItem } from "./test";

      export function isTypes(obj: any): obj is Types {
          return (
              (obj === Types.TheGood ||
                  obj === Types.TheBad ||
                  obj === Types.TheTypeSafe)
          )
      }

      export function isTestItem(obj: any): obj is TestItem {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              (obj["room"] !== null &&
                  typeof obj["room"] === "object" ||
                  typeof obj["room"] === "function") &&
              (typeof obj["room"]["1"] === "undefined" ||
                  typeof obj["room"]["1"] === "string") &&
              (typeof obj["room"]["2"] === "undefined" ||
                  typeof obj["room"]["2"] === "string") &&
              (typeof obj["room"]["3"] === "undefined" ||
                  typeof obj["room"]["3"] === "string")
          )
      }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'generated type guards for arrays of any',
  {
    'test.ts': `
      export interface Foo {
        value: any[]
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { Foo } from "./test";

      export function isFoo(obj: any): obj is Foo {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              Array.isArray(obj["value"])
          )
      }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'generated type guards for nested arrays',
  {
    'test.ts': `
      export type Foo = {
        value: Array<{
          value: Array<number>
        }>
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
        import { Foo } from "./test";

        export function isFoo(obj: any): obj is Foo {
            return (
                (obj !== null &&
                    typeof obj === "object" ||
                    typeof obj === "function") &&
                Array.isArray(obj["value"]) &&
                obj["value"].every((e: any) =>
                    (e !== null &&
                        typeof e === "object" ||
                        typeof e === "function") &&
                    Array.isArray(e["value"]) &&
                    e["value"].every((e: any) =>
                        typeof e === "number"
                    )
                )
            )
        }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'type that is an alias to an interface has a different typeguard name',
  {
    'test.ts': `
      export interface TestType {
          [index: any]: string
      }
      export type SecondaryTestType = TestType
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType, SecondaryTestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              Object.entries<any>(obj)
                  .every(([_key, value]) => (typeof value === "string"))
          )
      }

      export function isSecondaryTestType(obj: any): obj is SecondaryTestType {
        return (
            (obj !== null &&
                typeof obj === "object" ||
                typeof obj === "function") &&
            Object.entries<any>(obj)
                .every(([_key, value]) => (typeof value === "string"))
        )
      }
      `,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'adds type guard import to source file and also exports',
  {
    // NOTE: This file is not automatically cleaned up with `formatText` after
    // being modified so it requires this funky indentation to ensure that it is
    // conforms to ts-morph's formatting.
    'test.ts': `
/** @see {isEmpty} ts-auto-guard:type-guard */
export interface Empty { }
`,
  },
  {
    'test.ts': `
    import * as CustomGuardAlias from "./test.guard";

    /** @see {isEmpty} ts-auto-guard:type-guard */
    export interface Empty {}
    export { CustomGuardAlias };`,
    'test.guard.ts': `
    import { Empty } from "./test";

    export function isEmpty(obj: any): obj is Empty {
        return (
              (obj !== null &&
              typeof obj === "object" ||
              typeof obj === "function")
           )
    }`,
  },
  { options: { importGuards: 'CustomGuardAlias' } }
)

testProcessProject(
  'imports and uses generated type guard if the type is used in another file',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
          someKey: string | number
      }
      `,
    'test-list.ts': `
      import { TestType } from './test'

      /** @see {isTestTypeList} ts-auto-guard:type-guard */
      export type TestTypeList = Array<TestType>
      `,
  },
  {
    'test.ts': null,
    'test-list.ts': null,
    'test-list.guard.ts': `
      import { isTestType } from "./test.guard";
      import { TestTypeList } from "./test-list";

      export function isTestTypeList(obj: any): obj is TestTypeList {
          return (
              Array.isArray(obj) &&
              obj.every((e: any) =>
                  isTestType(e) as boolean
              )
          )
      }
      `,
    'test.guard.ts': `
        import { TestType } from "./test";

        export function isTestType(obj: any): obj is TestType {
            return (
                (obj !== null &&
                    typeof obj === "object" ||
                    typeof obj === "function") &&
                (typeof obj["someKey"] === "string" ||
                    typeof obj["someKey"] === "number")
            )
        }
        `,
  }
)

testProcessProject(
  'generates type guards for dynamic object keys, including when mixed with static keys',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
          someKey: "some" | "key"
          [index: string]: "dynamic" | "string"
          [index: number]: "also-dynamic" | "number"
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              (obj["someKey"] === "some" ||
                  obj["someKey"] === "key") &&
              Object.entries<any>(obj)
                  .filter(([key]) => !["someKey"].includes(key))
                  .every(([key, value]) => ((value === "string" ||
                      value === "dynamic") &&
                      typeof key === "string" ||
                      (value === "number" ||
                          value === "also-dynamic") &&
                      typeof key === "number"))
          )
      }
      `,
  }
)

testProcessProject(
  'generates type guards for Record types',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export type TestType = Record<string, "dynamic" | "string">
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              Object.entries<any>(obj)
                  .every(([key, value]) => ((value === "string" ||
                      value === "dynamic") &&
                      typeof key === "string"))
          )
      }
      `,
  }
)

testProcessProject(
  'prefixes value with underscore if it goes unused',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
          [index: string]: any
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              Object.entries<any>(obj)
                  .every(([key, _value]) => (typeof key === "string"))
          )
      }
      `,
  }
)

testProcessProject(
  'prefixes key with underscore if it goes unused',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
          [index: any]: string
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              Object.entries<any>(obj)
                  .every(([_key, value]) => (typeof value === "string"))
          )
      }
      `,
  }
)

testProcessProject(
  'Does not generate empty guard files',
  {
    'test.ts': '',
  },
  { 'test.ts': null }
)

testProcessProject(
  'Deals with unknown type as it would any',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
          [index: string]: unknown
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              Object.entries<any>(obj)
                  .every(([key, _value]) => (typeof key === "string"))
          )
      }
      `,
  }
)

testProcessProject(
  'Deals with unknown type as it would any',
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
          test: unknown
      }
      `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function")
          )
      }
      `,
  }
)

testProcessProject(
  'Check if any callable properties is a function',
  // should also emit a warning about how it is not possible to check function type at runtime.
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
        test: (() => void)
        // ts-auto-guard-suppress function-type
        test2(someArg: number): boolean
        // some other comments
        test3: {
          (someArg: string): number
          test3Arg: number;
        }
      }
    `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
              typeof obj["test"] === "function" &&
              typeof obj["test3"] === "function" &&
              typeof obj["test3"]["test3Arg"] === "number" &&
              typeof obj["test2"] === "function"
          )
      }
    `,
  }
)

testProcessProject(
  'Check if callable interface is a function',
  // should also emit a warning about how it is not possible to check function type at runtime.
  {
    'test.ts': `
      /** @see {isTestType} ts-auto-guard:type-guard */
      export interface TestType {
        (someArg: string): number
        arg: number;
      }
    `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
      import { TestType } from "./test";

      export function isTestType(obj: any): obj is TestType {
          return (
              typeof obj === "function" &&
              typeof obj["arg"] === "number"
          )
      }
    `,
  }
)

testProcessProject(
  'generated type guards for intersection type',
  {
    'test.ts': `
    export type X = { foo: number } & { bar: string }
    `,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { X } from "./test";

    export function isX(obj: any): obj is X {
        return (
            (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
                typeof obj["foo"] === "number" &&
                (obj !== null &&
                  typeof obj === "object" ||
                  typeof obj === "function") &&
                typeof obj["bar"] === "string"
            )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'generates tuples',
  {
    'test.ts': `
    export interface A {
      b: [number]
    }`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { A } from "./test";

    export function isA(obj: any): obj is A {
        return (
            (obj !== null &&
                typeof obj === "object" ||
                typeof obj === "function") &&
            Array.isArray(obj["b"]) &&
            typeof obj["b"][0] === "number"
        )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'skips checking any type in array',
  {
    'test.ts': `export type A = any[]`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { A } from "./test";

    export function isA(obj: any): obj is A {
        return (
          Array.isArray(obj)
        )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'works for any type',
  {
    'test.ts': `export type A = any`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { A } from "./test";

    export function isA(obj: any): obj is A {
        return (
          true
        )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'works for unknown type',
  {
    'test.ts': `export type A = unknown`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { A } from "./test";

    export function isA(obj: any): obj is A {
        return (
          true
        )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'any and unknown work in union types',
  {
    'test.ts': `
    type anyType = any
    type unknownType = unknown

    export type AnyOrString = string | anyType
    export type UnknownOrString = string | unknownType
    export type AnyOrUnknownOrString = string | anyType | unknownType`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { AnyOrString, UnknownOrString, AnyOrUnknownOrString } from "./test";

    export function isAnyOrString(obj: any): obj is AnyOrString {
        return (
          true
        )
    }

    export function isUnknownOrString(obj: any): obj is UnknownOrString {
      return (
        true
      )
    }

    export function isAnyOrUnknownOrString(obj: any): obj is AnyOrUnknownOrString {
        return (
          true
        )
    }`,
  },
  { options: { exportAll: true } }
)

testProcessProject(
  'any and unknown work in interesction types',
  {
    'test.ts': `
    type anyType = any
    type unknownType = unknown

    export type AnyAndString = string & anyType
    export type UnknownAndString = string & unknownType
    export type AnyAndUnknownAndString = string & anyType & unknownType`,
  },
  {
    'test.ts': null,
    'test.guard.ts': `
    import { AnyAndString, UnknownAndString, AnyAndUnknownAndString } from "./test";

    export function isAnyAndString(obj: any): obj is AnyAndString {
        return (
          true
        )
    }

    export function isUnknownAndString(obj: any): obj is UnknownAndString {
      return (
        typeof obj === "string"
      )
    }

    export function isAnyAndUnknownAndString(obj: any): obj is AnyAndUnknownAndString {
        return (
          true
        )
    }`,
  },
  { options: { exportAll: true } }
)
